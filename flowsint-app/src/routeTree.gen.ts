/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as MiddlewareImport } from './routes/middleware'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthDashboardImport } from './routes/_auth.dashboard'
import { Route as AuthDashboardTransformsImport } from './routes/_auth.dashboard.transforms'
import { Route as AuthDashboardInvestigationsImport } from './routes/_auth.dashboard.investigations'
import { Route as AuthDashboardTransformsTransformIdImport } from './routes/_auth.dashboard.transforms.$transformId'
import { Route as AuthDashboardInvestigationsInvestigationIdImport } from './routes/_auth.dashboard.investigations.$investigationId'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const MiddlewareRoute = MiddlewareImport.update({
  id: '/middleware',
  path: '/middleware',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardTransformsRoute = AuthDashboardTransformsImport.update({
  id: '/transforms',
  path: '/transforms',
  getParentRoute: () => AuthDashboardRoute,
} as any)

const AuthDashboardInvestigationsRoute =
  AuthDashboardInvestigationsImport.update({
    id: '/investigations',
    path: '/investigations',
    getParentRoute: () => AuthDashboardRoute,
  } as any)

const AuthDashboardTransformsTransformIdRoute =
  AuthDashboardTransformsTransformIdImport.update({
    id: '/$transformId',
    path: '/$transformId',
    getParentRoute: () => AuthDashboardTransformsRoute,
  } as any)

const AuthDashboardInvestigationsInvestigationIdRoute =
  AuthDashboardInvestigationsInvestigationIdImport.update({
    id: '/$investigationId',
    path: '/$investigationId',
    getParentRoute: () => AuthDashboardInvestigationsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/middleware': {
      id: '/middleware'
      path: '/middleware'
      fullPath: '/middleware'
      preLoaderRoute: typeof MiddlewareImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_auth/dashboard/investigations': {
      id: '/_auth/dashboard/investigations'
      path: '/investigations'
      fullPath: '/dashboard/investigations'
      preLoaderRoute: typeof AuthDashboardInvestigationsImport
      parentRoute: typeof AuthDashboardImport
    }
    '/_auth/dashboard/transforms': {
      id: '/_auth/dashboard/transforms'
      path: '/transforms'
      fullPath: '/dashboard/transforms'
      preLoaderRoute: typeof AuthDashboardTransformsImport
      parentRoute: typeof AuthDashboardImport
    }
    '/_auth/dashboard/investigations/$investigationId': {
      id: '/_auth/dashboard/investigations/$investigationId'
      path: '/$investigationId'
      fullPath: '/dashboard/investigations/$investigationId'
      preLoaderRoute: typeof AuthDashboardInvestigationsInvestigationIdImport
      parentRoute: typeof AuthDashboardInvestigationsImport
    }
    '/_auth/dashboard/transforms/$transformId': {
      id: '/_auth/dashboard/transforms/$transformId'
      path: '/$transformId'
      fullPath: '/dashboard/transforms/$transformId'
      preLoaderRoute: typeof AuthDashboardTransformsTransformIdImport
      parentRoute: typeof AuthDashboardTransformsImport
    }
  }
}

// Create and export the route tree

interface AuthDashboardInvestigationsRouteChildren {
  AuthDashboardInvestigationsInvestigationIdRoute: typeof AuthDashboardInvestigationsInvestigationIdRoute
}

const AuthDashboardInvestigationsRouteChildren: AuthDashboardInvestigationsRouteChildren =
  {
    AuthDashboardInvestigationsInvestigationIdRoute:
      AuthDashboardInvestigationsInvestigationIdRoute,
  }

const AuthDashboardInvestigationsRouteWithChildren =
  AuthDashboardInvestigationsRoute._addFileChildren(
    AuthDashboardInvestigationsRouteChildren,
  )

interface AuthDashboardTransformsRouteChildren {
  AuthDashboardTransformsTransformIdRoute: typeof AuthDashboardTransformsTransformIdRoute
}

const AuthDashboardTransformsRouteChildren: AuthDashboardTransformsRouteChildren =
  {
    AuthDashboardTransformsTransformIdRoute:
      AuthDashboardTransformsTransformIdRoute,
  }

const AuthDashboardTransformsRouteWithChildren =
  AuthDashboardTransformsRoute._addFileChildren(
    AuthDashboardTransformsRouteChildren,
  )

interface AuthDashboardRouteChildren {
  AuthDashboardInvestigationsRoute: typeof AuthDashboardInvestigationsRouteWithChildren
  AuthDashboardTransformsRoute: typeof AuthDashboardTransformsRouteWithChildren
}

const AuthDashboardRouteChildren: AuthDashboardRouteChildren = {
  AuthDashboardInvestigationsRoute:
    AuthDashboardInvestigationsRouteWithChildren,
  AuthDashboardTransformsRoute: AuthDashboardTransformsRouteWithChildren,
}

const AuthDashboardRouteWithChildren = AuthDashboardRoute._addFileChildren(
  AuthDashboardRouteChildren,
)

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/middleware': typeof MiddlewareRoute
  '/register': typeof RegisterRoute
  '/dashboard': typeof AuthDashboardRouteWithChildren
  '/dashboard/investigations': typeof AuthDashboardInvestigationsRouteWithChildren
  '/dashboard/transforms': typeof AuthDashboardTransformsRouteWithChildren
  '/dashboard/investigations/$investigationId': typeof AuthDashboardInvestigationsInvestigationIdRoute
  '/dashboard/transforms/$transformId': typeof AuthDashboardTransformsTransformIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/middleware': typeof MiddlewareRoute
  '/register': typeof RegisterRoute
  '/dashboard': typeof AuthDashboardRouteWithChildren
  '/dashboard/investigations': typeof AuthDashboardInvestigationsRouteWithChildren
  '/dashboard/transforms': typeof AuthDashboardTransformsRouteWithChildren
  '/dashboard/investigations/$investigationId': typeof AuthDashboardInvestigationsInvestigationIdRoute
  '/dashboard/transforms/$transformId': typeof AuthDashboardTransformsTransformIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/middleware': typeof MiddlewareRoute
  '/register': typeof RegisterRoute
  '/_auth/dashboard': typeof AuthDashboardRouteWithChildren
  '/_auth/dashboard/investigations': typeof AuthDashboardInvestigationsRouteWithChildren
  '/_auth/dashboard/transforms': typeof AuthDashboardTransformsRouteWithChildren
  '/_auth/dashboard/investigations/$investigationId': typeof AuthDashboardInvestigationsInvestigationIdRoute
  '/_auth/dashboard/transforms/$transformId': typeof AuthDashboardTransformsTransformIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/middleware'
    | '/register'
    | '/dashboard'
    | '/dashboard/investigations'
    | '/dashboard/transforms'
    | '/dashboard/investigations/$investigationId'
    | '/dashboard/transforms/$transformId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/middleware'
    | '/register'
    | '/dashboard'
    | '/dashboard/investigations'
    | '/dashboard/transforms'
    | '/dashboard/investigations/$investigationId'
    | '/dashboard/transforms/$transformId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/middleware'
    | '/register'
    | '/_auth/dashboard'
    | '/_auth/dashboard/investigations'
    | '/_auth/dashboard/transforms'
    | '/_auth/dashboard/investigations/$investigationId'
    | '/_auth/dashboard/transforms/$transformId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  MiddlewareRoute: typeof MiddlewareRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  MiddlewareRoute: MiddlewareRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/middleware",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/middleware": {
      "filePath": "middleware.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/dashboard": {
      "filePath": "_auth.dashboard.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/dashboard/investigations",
        "/_auth/dashboard/transforms"
      ]
    },
    "/_auth/dashboard/investigations": {
      "filePath": "_auth.dashboard.investigations.tsx",
      "parent": "/_auth/dashboard",
      "children": [
        "/_auth/dashboard/investigations/$investigationId"
      ]
    },
    "/_auth/dashboard/transforms": {
      "filePath": "_auth.dashboard.transforms.tsx",
      "parent": "/_auth/dashboard",
      "children": [
        "/_auth/dashboard/transforms/$transformId"
      ]
    },
    "/_auth/dashboard/investigations/$investigationId": {
      "filePath": "_auth.dashboard.investigations.$investigationId.tsx",
      "parent": "/_auth/dashboard/investigations"
    },
    "/_auth/dashboard/transforms/$transformId": {
      "filePath": "_auth.dashboard.transforms.$transformId.tsx",
      "parent": "/_auth/dashboard/transforms"
    }
  }
}
ROUTE_MANIFEST_END */
